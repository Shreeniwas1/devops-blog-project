pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'your-registry.com'
        DOCKER_REPO = 'personal-blog'
        KUBECONFIG = credentials('kubeconfig')
        DOCKER_CREDENTIALS = credentials('docker-registry-creds')
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/your-username/devops-blog-project.git'
            }
        }
        
        stage('Build Frontend') {
            steps {
                script {
                    dir('frontend') {
                        sh 'npm install'
                        sh 'npm run build'
                        sh 'npm test -- --coverage --watchAll=false'
                    }
                }
            }
        }
        
        stage('Build Backend') {
            steps {
                script {
                    dir('backend') {
                        sh 'npm install'
                        sh 'npm test'
                    }
                }
            }
        }
        
        stage('Security Scan') {
            parallel {
                stage('Frontend Security') {
                    steps {
                        dir('frontend') {
                            sh 'npm audit --audit-level=high'
                        }
                    }
                }
                stage('Backend Security') {
                    steps {
                        dir('backend') {
                            sh 'npm audit --audit-level=high'
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Images') {
            parallel {
                stage('Build Frontend Image') {
                    steps {
                        script {
                            dir('frontend') {
                                def frontendImage = docker.build("${DOCKER_REGISTRY}/${DOCKER_REPO}-frontend:${BUILD_NUMBER}")
                                docker.withRegistry("https://${DOCKER_REGISTRY}", DOCKER_CREDENTIALS) {
                                    frontendImage.push()
                                    frontendImage.push('latest')
                                }
                            }
                        }
                    }
                }
                stage('Build Backend Image') {
                    steps {
                        script {
                            dir('backend') {
                                def backendImage = docker.build("${DOCKER_REGISTRY}/${DOCKER_REPO}-backend:${BUILD_NUMBER}")
                                docker.withRegistry("https://${DOCKER_REGISTRY}", DOCKER_CREDENTIALS) {
                                    backendImage.push()
                                    backendImage.push('latest')
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Container Security Scan') {
            parallel {
                stage('Scan Frontend Image') {
                    steps {
                        script {
                            sh "trivy image ${DOCKER_REGISTRY}/${DOCKER_REPO}-frontend:${BUILD_NUMBER}"
                        }
                    }
                }
                stage('Scan Backend Image') {
                    steps {
                        script {
                            sh "trivy image ${DOCKER_REGISTRY}/${DOCKER_REPO}-backend:${BUILD_NUMBER}"
                        }
                    }
                }
            }
        }
        
        stage('Deploy to Staging') {
            steps {
                script {
                    sh '''
                        # Update image tags in Kubernetes manifests
                        sed -i "s|personal-blog-frontend:latest|${DOCKER_REGISTRY}/${DOCKER_REPO}-frontend:${BUILD_NUMBER}|g" kubernetes/deployments/frontend-deployment.yaml
                        sed -i "s|personal-blog-backend:latest|${DOCKER_REGISTRY}/${DOCKER_REPO}-backend:${BUILD_NUMBER}|g" kubernetes/deployments/backend-deployment.yaml
                        
                        # Apply configurations
                        kubectl apply -f kubernetes/secrets/ --namespace=staging
                        kubectl apply -f kubernetes/configmaps/ --namespace=staging
                        kubectl apply -f kubernetes/deployments/ --namespace=staging
                        kubectl apply -f kubernetes/ingress/ --namespace=staging
                        
                        # Wait for deployment to complete
                        kubectl rollout status deployment/frontend-deployment --namespace=staging --timeout=300s
                        kubectl rollout status deployment/backend-deployment --namespace=staging --timeout=300s
                    '''
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                script {
                    sh '''
                        # Run integration tests against staging environment
                        export STAGING_URL="https://staging.your-domain.com"
                        
                        # Test frontend
                        curl -f "$STAGING_URL" || exit 1
                        
                        # Test backend API
                        curl -f "$STAGING_URL/api/posts" || exit 1
                        
                        # Test health endpoints
                        curl -f "$STAGING_URL/api/health" || exit 1
                    '''
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                script {
                    input message: 'Deploy to production?', ok: 'Deploy'
                    
                    sh '''
                        # Update image tags for production
                        sed -i "s|personal-blog-frontend:latest|${DOCKER_REGISTRY}/${DOCKER_REPO}-frontend:${BUILD_NUMBER}|g" kubernetes/deployments/frontend-deployment.yaml
                        sed -i "s|personal-blog-backend:latest|${DOCKER_REGISTRY}/${DOCKER_REPO}-backend:${BUILD_NUMBER}|g" kubernetes/deployments/backend-deployment.yaml
                        
                        # Apply to production namespace
                        kubectl apply -f kubernetes/secrets/ --namespace=production
                        kubectl apply -f kubernetes/configmaps/ --namespace=production
                        kubectl apply -f kubernetes/deployments/ --namespace=production
                        kubectl apply -f kubernetes/ingress/ --namespace=production
                        
                        # Wait for deployment
                        kubectl rollout status deployment/frontend-deployment --namespace=production --timeout=600s
                        kubectl rollout status deployment/backend-deployment --namespace=production --timeout=600s
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                // Cleanup Docker images
                sh "docker rmi ${DOCKER_REGISTRY}/${DOCKER_REPO}-frontend:${BUILD_NUMBER} || true"
                sh "docker rmi ${DOCKER_REGISTRY}/${DOCKER_REPO}-backend:${BUILD_NUMBER} || true"
                
                // Archive test results
                publishTestResults testResultsPattern: 'backend/test-results.xml, frontend/test-results.xml'
                
                // Publish coverage reports
                publishCoverageReport(
                    coverageResults: 'frontend/coverage/lcov.info',
                    baseDir: 'frontend',
                    dirName: 'coverage'
                )
            }
        }
        
        success {
            slackSend(
                channel: '#devops-notifications',
                color: 'good',
                message: "✅ Pipeline succeeded for ${env.JOB_NAME} - ${env.BUILD_NUMBER}"
            )
        }
        
        failure {
            slackSend(
                channel: '#devops-notifications',
                color: 'danger',
                message: "❌ Pipeline failed for ${env.JOB_NAME} - ${env.BUILD_NUMBER}"
            )
        }
    }
}
